import streamlit as st
import pandas as pd
import random
from faker import Faker

fake = Faker()

st.set_page_config(page_title="2050–2100 Autonomous Supply Chain + Cyber Defense Agent", layout="wide")

# -----------------------------
# Helper Functions
# -----------------------------

def simulate_supply_chain(n=10):
    """Generate fake supply chain shipments"""
    data = []
    for _ in range(n):
        data.append({
            "ShipmentID": fake.uuid4()[:8],
            "Origin": random.choice(["Earth", "Moon", "Mars", "Orbital Station Alpha"]),
            "Destination": random.choice(["Earth", "Moon", "Mars", "Orbital Station Beta"]),
            "Cargo": random.choice(["Water", "Food", "Oxygen Tanks", "Quantum Chips", "Fuel", "Medical Supplies"]),
            "Status": random.choice(["In Transit", "Delayed", "Compromised", "On Hold"]),
            "Risk": random.choice(["Low", "Medium", "High"])
        })
    return pd.DataFrame(data)

def agent_decision(disruption, cyber_event):
    """Simulate agentic AI decision making"""
    decision_log = []

    # Supply Chain Logic
    if "delay" in disruption.lower():
        decision_log.append("Detected supply chain delay. Agent rerouted cargo via alternate orbital hub.")
    elif "shortage" in disruption.lower():
        decision_log.append("Detected shortage. Agent reprioritized essential resources (Oxygen, Food).")
    else:
        decision_log.append("No major disruption detected. Normal operations continue.")

    # Cyber Defense Logic
    if "breach" in cyber_event.lower():
        decision_log.append("Cyber breach detected. Agent isolated compromised node and deployed quantum firewall.")
    elif "anomaly" in cyber_event.lower():
        decision_log.append("Network anomaly detected. Agent deployed deception honeypots + sandboxing.")
    else:
        decision_log.append("No cyber threats detected. Monitoring continues.")

    return decision_log

# -----------------------------
# Streamlit UI
# -----------------------------
st.title("🚀 2050–2100: Planetary Supply Chain & Quantum Cyber Defense Agent")

st.markdown("""
This MVP demonstrates a futuristic **Agentic AI system** (2050–2100) that:
- Monitors **interplanetary supply chains** 🌍🌙🚀
- Responds to **cyber threats in real-time** 🔐
- Takes **autonomous corrective actions**  
""")

st.sidebar.header("⚙️ Scenario Setup")
disruption = st.sidebar.text_input("Enter Supply Chain Disruption", "Delay at Lunar Port Alpha")
cyber_event = st.sidebar.text_input("Enter Cyber Event", "Quantum breach attempt on Mars node")
n_shipments = st.sidebar.slider("Number of Shipments", 5, 20, 10)

# Simulated Supply Chain
st.subheader("📦 Current Supply Chain State")
df = simulate_supply_chain(n_shipments)
st.dataframe(df, use_container_width=True)

# Agent Decisions
st.subheader("🤖 Agentic AI Decisions")
decisions = agent_decision(disruption, cyber_event)
for d in decisions:
    st.success(d)

# Generate Synthetic Report
st.subheader("📑 Incident Report")
report = f"""
### Incident Report (Generated by Agent)

- **Disruption Input:** {disruption}  
- **Cyber Event Input:** {cyber_event}  

**Actions Taken:**  
"""
for d in decisions:
    report += f"- {d}\n"

report += f"\n**Generated Shipments Analyzed:** {n_shipments}\n"
report += f"**Confidence Level:** {random.choice(['82%', '91%', '97%'])}\n"

st.markdown(report)

# Optional Download
st.download_button("📥 Download Report", report, file_name="agentic_incident_report.txt")
